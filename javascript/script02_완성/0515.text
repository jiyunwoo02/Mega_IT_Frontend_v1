0515 lesson

1.Review
연산자 - 산술, 대입, 복합대입, 증감, 결합, 비교, 논리, 삼항
새로운 변수 = 기존 변수 + 산술
프로그램 -> 수정
새로운 기능 서술 -> html css 프로그램
document.write()
console.log()

식 -> 즉각적으로 값
제어문 : 인의적으로 값 필요

    if(조건){true 실행문;}
    / else{false 실행문;}
    / else if(조건 n){조건n 실행문}

    switch(조건:값){
        case값: {실행문;}
        break;
        default: {실행문;}
    }

    for(선언 변수 = 시작값; 변수 목적값; 증감식){
        실행문;
    }

    while(조건 설정){
        실행문;
        증감식;
    }

2. lesson
<img src="" alt="">

- 함수 -> 어떤 기능, 작동 그룹 만들기
    - 내장함수 wite() log() prompt()
    - 사용자함수 -> 3가지 방법
    - 기본함수 만들기 -> 인수, 매개변수, 스코프, reutrn.. -> 형식 -> 화살표함수
    - function 이름(){실행문;}
    - function 이름(매개변수, 매개변수){
        실행문;
    }
    - 선언 이름 = function(){실행문;}
    - 앞의 출력값 사용 return 명령어 제어문
- 배열
- 객체(사용자)

이벤트 => 요소 안에 직접 
on 이벤트
addEventListener()
<p on이벤트 = "함수명(인수)">
오브젝트.on이벤트 = 함수 function(){}
오브젝트.addEventListener('이벤트명',함수명)

이름 = {키:데이터,
키:데이터
}
이름 = {
    속성명: 데이터;
}

이름있는 함수
이름없는 함수 - 화살표함수 (this 개념) -> ES6 -> 요즘 라이브러리
함수식
    const num = function(){실행문}
    const num = 0 -> 실행문
    (인수) => {실행문;}
    (인수,인수) => {실행문;}

() => {}
인수 => {}
(인수,인수) = {}
() => {실행문 한 줄}
(a) => {return a}
(a) => a

<on이벤트 = 함수(인수)>
오브젝트.on이벤트 = 함수;
    function(){}
    () => {}
오브젝트.addEventListener('이벤트', 함수명) <- 인자 들어가면 안된다

값의 상속